name: DEV deployment

on:
  workflow_dispatch:

  push:
    branches:
      - development
    paths:
      - 'lambda/**'
      - '.github/workflows/ci-dev.yml'
      - 'tf/development/**'

concurrency: development_environment

jobs:
  run:
    name: Run
#    env:
#      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEPLOYMENT_DEVELOPMENT }}
#      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEPLOYMENT_DEVELOPMENT }}
#      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION_DEPLOYMENT_DEVELOPMENT }}
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [ubuntu-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: use golang
        uses: actions/setup-go@v2
        with:
          go-version: '^1.17.2'
      - name: run vet
        run: |
          go vet ./...
      - name: run test
        run: |
          go test ./... -v
      - name: run statick check
        run: |
          go get honnef.co/go/tools/cmd/staticcheck
          staticcheck -checks "all" ./...
      - name: Build artefact
        env:
          CGO_ENABLED: 0
          GOOS: "linux"
          GOARCH: "arm64"
        run: |
          cd lambda
          mkdir -p ../src
          go build -o ../src/bootstrap
#      - name: use terraform
#        uses: hashicorp/setup-terraform@v1
#      - name: initialisation
#        run: |
#          cd tf/development
#          terraform init
#      - name: plan
#        run: |
#          cd tf/development
#          terraform plan -no-color -var-file development.tfvars -out=out.tfplan
#          terraform output
#      - name: apply
#        run: |
#          cd tf/development
#          terraform apply "out.tfplan"
